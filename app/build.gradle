plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
    id 'kotlin-parcelize'
}

android {
    compileSdkVersion 29
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.example.mostwanted"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            debuggable true
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
            manifestPlaceholders = [
                    appLabel: "Most Wanted Debug",
                    appIcon: "@mipmap/ic_launcher",
                    appIconRound: "@mipmap/ic_launcher_round"
            ]
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            applicationIdSuffix '.release'
            versionNameSuffix '-release'
            manifestPlaceholders = [
                    appLabel: "Most Wanted Release",
                    appIcon: "@mipmap/ic_launcher",
                    appIconRound: "@mipmap/ic_launcher_round"
            ]
            signingConfig debug.signingConfig
        }
        qa {
            applicationIdSuffix '.qa'
            versionNameSuffix '-qa'
            manifestPlaceholders = [
                    appLabel: "Most Wanted QA",
                    appIcon: "@mipmap/ic_launcher",
                    appIconRound: "@mipmap/ic_launcher_round"
            ]
            signingConfig debug.signingConfig
        }
    }

    flavorDimensions "version"
    productFlavors {
        apiMocked {
            dimension "version"
        }
        apiProduction {
            dimension "version"

//            def file = file("../keys.properties")
//            if(!file.exists()) {
//                throw new GradleException("No keys.properties file inside root project folder")
//            }
//
//            def properties = new Properties()
//            file.withInputStream { stream -> properties.load(stream) }
//            if(!properties.containsKey("API_KEY")) {
//                throw new GradleException("No API_KEY property provided")
//            }
//            buildConfigField "String", "API_KEY", properties.getProperty("API_KEY")
        }
    }

    variantFilter { variant ->
        if (variant.name == "apiMockedQa") {
            setIgnore(true)
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
        dataBinding true
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.4'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"

    def koin_version= "3.0.1-beta-1"
    // Koin main features for Android (Scope,ViewModel ...)
    implementation "io.insert-koin:koin-android:$koin_version"
    // Koin Android - experimental builder extensions
    implementation "io.insert-koin:koin-android-ext:$koin_version"

    def lifecycle_version = "2.3.0"
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    // optional - helpers for implementing LifecycleOwner in a Service
    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"
    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"


    def paging_version = "3.0.0-beta02"
    implementation "androidx.paging:paging-runtime-ktx:$paging_version"

    apiProductionImplementation 'com.squareup.retrofit2:retrofit:2.9.0'
    apiProductionImplementation 'com.squareup.retrofit2:converter-gson:2.9.0'
}